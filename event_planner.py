import openai
from openai import OpenAI
import instructor
from pydantic import BaseModel
from datetime import datetime
import os

# This enables response_model keyword
# from openai.ChatCompletion.create
# instructor.patch()
client = instructor.patch(OpenAI(api_key=os.environ["OPENAI_API_KEY"]))

now = datetime.utcnow()

class MeetData(BaseModel):
    meet: bool
    startTime: str
    endTime: str

def extract_meeting_info(email_content):
    messages = [{"role": "system", "content": '''I will give you content of an email generated by my bot, and you need to decide 
                    whether a meeting is confirmed using current information or not. Extract this value as boolean True or False.
                    If it is possible, return True and startTime and endTime in the format "yyyy-mm-ddThh:mm:ss".
                    If not possible, return False and startTime and endTime as empty strings.
                    Confirm the meeting only if you think there is a common time to schedule.
                    The email might be proposing a few time slots, so you need to decide properly is it is confirmed or not.
                    Do not confirm if the email is only proposing time slots.
                    Just for your referene, right now its {}'''.format(str(now))}]

    messages.append({"role": "user", "content": email_content})

    meet = client.chat.completions.create(
        # model="gpt-3.5-turbo",
        model="gpt-4",
        response_model=MeetData,
        messages=messages
    )

    return meet